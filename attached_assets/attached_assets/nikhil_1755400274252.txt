Hello! Your task is to act as my expert AI coding partner. I need your help to continue developing a web application. Below, I'm providing the full context, including the project's purpose, the technologies used, the complete file structure, and the full code for every single file.

Please analyze all of this information carefully before proceeding with any of my future requests.

The primary goal of this application is to display a single web page that contains a "zoomed-out" or "desktop mode" view of an existing website (https://nikhildath.github.io/aquaclima). The webview should render the target website at a fixed desktop width (1280px) and then scale the entire view down to fit the user's screen perfectly, filling both the width and the height without any blank spaces or cropping. The app is named "CLIMANEER".

Framework: Next.js (with App Router)
Language: TypeScript
UI Components: ShadCN
Styling: Tailwind CSS
AI Integration: Genkit (currently set up but not in use)
Here is the complete source code for every file in the project.

README.md

# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.

apphosting.yaml

# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1

components.json

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

next.config.ts

import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;

package.json

{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack -p 9002",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.14.1",
    "@genkit-ai/next": "^1.14.1",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^11.9.1",
    "genkit": "^1.14.1",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.14.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

src/ai/dev.ts

// Flows will be imported for their side effects in this file.

src/ai/genkit.ts

import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.0-flash',
});

src/app/globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 190 67% 93%;
    --foreground: 200 30% 25%;
    --card: 0 0% 100%;
    --card-foreground: 200 30% 25%;
    --popover: 0 0% 100%;
    --popover-foreground: 200 30% 25%;
    --primary: 197 76% 53%;
    --primary-foreground: 0 0% 100%;
    --secondary: 190 60% 85%;
    --secondary-foreground: 200 30% 25%;
    --muted: 190 60% 85%;
    --muted-foreground: 190 30% 45%;
    --accent: 0 80% 75%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 190 50% 80%;
    --input: 190 50% 85%;
    --ring: 197 76% 53%;
    --chart-1: 197 76% 53%;
    --chart-2: 0 80% 75%;
    --chart-3: 190 60% 85%;
    --chart-4: 200 30% 25%;
    --chart-5: 190 30% 45%;
    --radius: 0.5rem;
    --sidebar-background: 190 67% 90%;
    --sidebar-foreground: 200 30% 25%;
    --sidebar-primary: 197 76% 53%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 190 67% 85%;
    --sidebar-accent-foreground: 200 30% 25%;
    --sidebar-border: 190 50% 80%;
    --sidebar-ring: 197 76% 53%;
  }
  .dark {
    --background: 210 20% 12%;
    --foreground: 210 20% 95%;
    --card: 210 20% 12%;
    --card-foreground: 210 20% 95%;
    --popover: 210 20% 12%;
    --popover-foreground: 210 20% 95%;
    --primary: 197 76% 53%;
    --primary-foreground: 0 0% 100%;
    --secondary: 210 20% 18%;
    --secondary-foreground: 210 20% 95%;
    --muted: 210 20% 18%;
    --muted-foreground: 210 20% 65%;
    --accent: 0 80% 75%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 210 20% 25%;
    --input: 210 20% 25%;
    --ring: 197 76% 53%;
    --chart-1: 197 76% 53%;
    --chart-2: 0 80% 75%;
    --chart-3: 190 60% 85%;
    --chart-4: 200 30% 25%;
    --chart-5: 190 30% 45%;
    --sidebar-background: 210 20% 12%;
    --sidebar-foreground: 210 20% 95%;
    --sidebar-primary: 197 76% 53%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 210 20% 18%;
    --sidebar-accent-foreground: 210 20% 95%;
    --sidebar-border: 210 20% 25%;
    --sidebar-ring: 197 76% 53%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

src/app/layout.tsx

import type {Metadata} from 'next';
import './globals.css';
import { Toaster } from "@/components/ui/toaster"

export const metadata: Metadata = {
  title: 'CLIMANEER',
  description: 'A web-based APK for nikhildath.github.io/aquaclima',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Inter&display=swap" rel="stylesheet" />
      </head>
      <body className="font-body antialiased">
        {children}
        <Toaster />
      </body>
    </html>
  );
}

src/app/page.tsx

import { WebviewFrame } from '@/components/webview-frame';

export default function Home() {
  return (
    <main className="h-screen w-screen overflow-hidden">
      <WebviewFrame url="https://nikhildath.github.io/aquaclima" />
    </main>
  );
}

src/components/webview-frame.tsx

"use client";

import React, { useState, useRef, useLayoutEffect } from 'react';
import { Loader2, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { CardHeader } from '@/components/ui/card';

interface WebviewFrameProps {
  url: string;
}

const DESKTOP_WIDTH = 1280;

export function WebviewFrame({ url }: WebviewFrameProps) {
  const [loading, setLoading] = useState(true);
  const [iframeKey, setIframeKey] = useState(Date.now());
  const [scale, setScale] = useState(1);
  const [scaledHeight, setScaledHeight] = useState(0);
  const containerRef = useRef<HTMLDivElement>(null);

  const handleRefresh = () => {
    setLoading(true);
    setIframeKey(Date.now());
  };

  useLayoutEffect(() => {
    const calculateScale = () => {
      if (containerRef.current) {
        const containerWidth = containerRef.current.offsetWidth;
        const containerHeight = containerRef.current.offsetHeight;
        const newScale = containerWidth / DESKTOP_WIDTH;
        setScale(newScale);
        setScaledHeight(containerHeight / newScale);
      }
    };

    calculateScale();

    const resizeObserver = new ResizeObserver(calculateScale);
    if (containerRef.current) {
      resizeObserver.observe(containerRef.current);
    }

    return () => {
      if (containerRef.current) {
        resizeObserver.unobserve(containerRef.current);
      }
    };
  }, []);

  return (
    <div className="flex h-full w-full flex-col bg-background">
      <CardHeader className="flex flex-row items-center justify-between border-b bg-card p-2 text-primary sm:p-3">
        <h1 className="font-headline text-base font-bold sm:text-lg">
          CLIMANEER
        </h1>
        <Button
          variant="ghost"
          size="icon"
          onClick={handleRefresh}
          aria-label="Refresh page"
        >
          <RefreshCw className="h-5 w-5" />
        </Button>
      </CardHeader>
      <div ref={containerRef} className="relative flex-1 overflow-hidden bg-white">
        {loading && (
          <div className="absolute z-10 flex h-full w-full flex-col items-center justify-center gap-4 bg-background/80 backdrop-blur-sm">
            <Loader2 className="h-12 w-12 animate-spin text-primary" />
            <p className="font-body text-muted-foreground">
              Loading environment...
            </p>
          </div>
        )}
        {scale > 0 && (
          <div
            style={{
              transform: `scale(${scale})`,
              transformOrigin: 'top left',
              width: DESKTOP_WIDTH,
              height: scaledHeight,
            }}
          >
            <iframe
              key={iframeKey}
              src={url}
              onLoad={() => setLoading(false)}
              className="border-0"
              title="CLIMANEER Website"
              sandbox="allow-scripts allow-same-origin allow-popups allow-forms"
              style={{ width: `${DESKTOP_WIDTH}px`, height: `${scaledHeight}px` }}
            />
          </div>
        )}
      </div>
    </div>
  );
}

src/lib/utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

tailwind.config.ts

import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        body: ['Inter', 'sans-serif'],
        headline: ['Inter', 'sans-serif'],
        code: ['monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;

tsconfig.json

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

(The remaining files are standard ShadCN UI components and hooks, which are less critical to the core logic but are available in the project structure.)



